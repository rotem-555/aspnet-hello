# Docker Compose file for E-Commerce Application
# Use: docker compose up -d

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ecommerce-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ECommerceDB
      MYSQL_USER: ecommerce
      MYSQL_PASSWORD: ecommerce123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # .NET Backend API
  backend:
    build:
      context: ./HelloWeb
      dockerfile: Dockerfile
    container_name: ecommerce-backend
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=mysql;Database=ECommerceDB;Uid=ecommerce;Pwd=ecommerce123;
      - Jwt__Key=ThisIsAVeryLongSecretKeyForJWTTokenGenerationThatShouldBeAtLeast32CharactersLong
      - Jwt__Issuer=ECommerceAPI
      - Jwt__Audience=ECommerceClient
    ports:
      - "5000:80"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Angular Frontend
  frontend:
    build:
      context: ./ecommerce-frontend
      dockerfile: Dockerfile
    container_name: ecommerce-frontend
    restart: unless-stopped
    ports:
      - "4200:4200"
    depends_on:
      - backend
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3


volumes:
  mysql_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
